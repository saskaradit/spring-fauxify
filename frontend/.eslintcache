[{"/Users/saskara/Documents/Course/Udemy/Spring TDD/fauxify/frontend/src/index.js":"1","/Users/saskara/Documents/Course/Udemy/Spring TDD/fauxify/frontend/src/App.js":"2","/Users/saskara/Documents/Course/Udemy/Spring TDD/fauxify/frontend/src/pages/UserSignupPage.js":"3","/Users/saskara/Documents/Course/Udemy/Spring TDD/fauxify/frontend/src/components/input.js":"4","/Users/saskara/Documents/Course/Udemy/Spring TDD/fauxify/frontend/src/api/apiCalls.js":"5"},{"size":427,"mtime":1641198495174,"results":"6","hashOfConfig":"7"},{"size":327,"mtime":1641357209951,"results":"8","hashOfConfig":"7"},{"size":2919,"mtime":1641357113753,"results":"9","hashOfConfig":"7"},{"size":656,"mtime":1641356316275,"results":"10","hashOfConfig":"7"},{"size":106,"mtime":1641197404963,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4ni2vi",{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/saskara/Documents/Course/Udemy/Spring TDD/fauxify/frontend/src/index.js",[],"/Users/saskara/Documents/Course/Udemy/Spring TDD/fauxify/frontend/src/App.js",[],"/Users/saskara/Documents/Course/Udemy/Spring TDD/fauxify/frontend/src/pages/UserSignupPage.js",["23"],"import React, { useEffect, useState } from 'react'\nimport Input from '../components/input'\n\nconst UserSignupPage = (props) => {\n  const [displayName, setDisplayName] = useState('')\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [confirmPassword, setconfirmPassword] = useState('')\n  const [sent, setSent] = useState(false)\n  const [errors, setErrors] = useState({})\n\n  const submit = () => {\n    if (props.actions) {\n      const user = {\n        username,\n        displayName,\n        password,\n      }\n      setSent(true)\n      props.actions\n        .postSignup(user)\n        .then((response) => {\n          setSent(false)\n        })\n        .catch((apiError) => {\n          if (\n            apiError.response.data &&\n            apiError.response.data.validationErrors\n          ) {\n            setErrors(apiError.response.data.validationErrors)\n          }\n          setSent(false)\n        })\n    }\n  }\n\n  return (\n    <div className='container col-4'>\n      <h1 className='text-center'>Sign Up</h1>\n      <div className='mb-3'>\n        <Input\n          label='Display Name'\n          type='text'\n          placeholder='Display Name'\n          value={displayName}\n          onChange={(e) => setDisplayName(e.target.value)}\n          hasError={errors.displayName && true}\n          error={errors.displayName}\n        />\n      </div>\n      <div className='mb-3'>\n        <Input\n          label='Username'\n          type='text'\n          placeholder='Username'\n          value={username}\n          onChange={(e) => setUsername(e.target.value)}\n          hasError={errors.username && true}\n          error={errors.username}\n        />\n      </div>\n      <div className='mb-3'>\n        <Input\n          label='Password'\n          type='password'\n          placeholder='Password'\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          hasError={errors.password && true}\n          error={errors.password}\n        />\n      </div>\n      <div className='mb-3'>\n        <Input\n          label='Confirm Password'\n          type='password'\n          placeholder='Confirm Password'\n          value={confirmPassword}\n          onChange={(e) => setconfirmPassword(e.target.value)}\n          hasError={errors.confirmPassword && true}\n          error={errors.confirmPassword}\n        />\n      </div>\n      <div className='text-center'>\n        <button className='btn btn-primary' onClick={submit} disabled={sent}>\n          Sign Up\n          {sent && (\n            <div className='spinner-border text-light spinner-border-sm mr-sm-1'>\n              <span className='sr-only'> </span>\n            </div>\n          )}\n        </button>\n      </div>\n    </div>\n  )\n}\n\nUserSignupPage.defaultProps = {\n  actions: {\n    postSignup: () =>\n      new Promise((resolve, reject) => {\n        resolve({})\n      }),\n  },\n}\n\nexport default UserSignupPage\n","/Users/saskara/Documents/Course/Udemy/Spring TDD/fauxify/frontend/src/components/input.js",[],"/Users/saskara/Documents/Course/Udemy/Spring TDD/fauxify/frontend/src/api/apiCalls.js",[],{"ruleId":"24","severity":1,"message":"25","line":1,"column":17,"nodeType":"26","messageId":"27","endLine":1,"endColumn":26},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar"]